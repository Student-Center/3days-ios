// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// 휴대폰 번호 인증 요청
    ///
    /// 사용자의 휴대폰 번호로 인증 코드를 발송합니다.
    ///
    /// - Remark: HTTP `POST /auth/phone`.
    /// - Remark: Generated from `#/paths//auth/phone/post`.
    func post_sol_auth_sol_phone(_ input: Operations.post_sol_auth_sol_phone.Input) async throws -> Operations.post_sol_auth_sol_phone.Output
    /// 인증 코드 확인
    ///
    /// 사용자가 입력한 인증 코드의 유효성을 확인합니다.
    ///
    /// - Remark: HTTP `POST /auth/verify`.
    /// - Remark: Generated from `#/paths//auth/verify/post`.
    func post_sol_auth_sol_verify(_ input: Operations.post_sol_auth_sol_verify.Input) async throws -> Operations.post_sol_auth_sol_verify.Output
    /// 회원가입 완료
    ///
    /// Register Token과 사용자 프로필 정보를 이용하여 회원가입을 완료합니다.
    ///
    /// - Remark: HTTP `POST /auth/register`.
    /// - Remark: Generated from `#/paths//auth/register/post`.
    func post_sol_auth_sol_register(_ input: Operations.post_sol_auth_sol_register.Input) async throws -> Operations.post_sol_auth_sol_register.Output
    /// 액세스 토큰 갱신
    ///
    /// 리프레시 토큰을 이용하여 새로운 액세스 토큰을 발급받습니다.
    ///
    /// - Remark: HTTP `POST /auth/refresh`.
    /// - Remark: Generated from `#/paths//auth/refresh/post`.
    func post_sol_auth_sol_refresh(_ input: Operations.post_sol_auth_sol_refresh.Input) async throws -> Operations.post_sol_auth_sol_refresh.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// 휴대폰 번호 인증 요청
    ///
    /// 사용자의 휴대폰 번호로 인증 코드를 발송합니다.
    ///
    /// - Remark: HTTP `POST /auth/phone`.
    /// - Remark: Generated from `#/paths//auth/phone/post`.
    public func post_sol_auth_sol_phone(body: Operations.post_sol_auth_sol_phone.Input.Body) async throws -> Operations.post_sol_auth_sol_phone.Output {
        try await post_sol_auth_sol_phone(Operations.post_sol_auth_sol_phone.Input(body: body))
    }
    /// 인증 코드 확인
    ///
    /// 사용자가 입력한 인증 코드의 유효성을 확인합니다.
    ///
    /// - Remark: HTTP `POST /auth/verify`.
    /// - Remark: Generated from `#/paths//auth/verify/post`.
    public func post_sol_auth_sol_verify(
        headers: Operations.post_sol_auth_sol_verify.Input.Headers = .init(),
        body: Operations.post_sol_auth_sol_verify.Input.Body
    ) async throws -> Operations.post_sol_auth_sol_verify.Output {
        try await post_sol_auth_sol_verify(Operations.post_sol_auth_sol_verify.Input(
            headers: headers,
            body: body
        ))
    }
    /// 회원가입 완료
    ///
    /// Register Token과 사용자 프로필 정보를 이용하여 회원가입을 완료합니다.
    ///
    /// - Remark: HTTP `POST /auth/register`.
    /// - Remark: Generated from `#/paths//auth/register/post`.
    public func post_sol_auth_sol_register(
        headers: Operations.post_sol_auth_sol_register.Input.Headers = .init(),
        body: Operations.post_sol_auth_sol_register.Input.Body
    ) async throws -> Operations.post_sol_auth_sol_register.Output {
        try await post_sol_auth_sol_register(Operations.post_sol_auth_sol_register.Input(
            headers: headers,
            body: body
        ))
    }
    /// 액세스 토큰 갱신
    ///
    /// 리프레시 토큰을 이용하여 새로운 액세스 토큰을 발급받습니다.
    ///
    /// - Remark: HTTP `POST /auth/refresh`.
    /// - Remark: Generated from `#/paths//auth/refresh/post`.
    public func post_sol_auth_sol_refresh(
        headers: Operations.post_sol_auth_sol_refresh.Input.Headers = .init(),
        body: Operations.post_sol_auth_sol_refresh.Input.Body
    ) async throws -> Operations.post_sol_auth_sol_refresh.Output {
        try await post_sol_auth_sol_refresh(Operations.post_sol_auth_sol_refresh.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// 휴대폰 번호 인증 요청 정보
        ///
        /// - Remark: Generated from `#/components/schemas/PhoneRequest`.
        public struct PhoneRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PhoneRequest/phone`.
            public var phone: Swift.String
            /// Creates a new `PhoneRequest`.
            ///
            /// - Parameters:
            ///   - phone:
            public init(phone: Swift.String) {
                self.phone = phone
            }
            public enum CodingKeys: String, CodingKey {
                case phone
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                phone = try container.decode(
                    Swift.String.self,
                    forKey: .phone
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "phone"
                ])
            }
        }
        /// 인증 코드 확인 요청 정보
        ///
        /// - Remark: Generated from `#/components/schemas/VerificationRequest`.
        public struct VerificationRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VerificationRequest/phone`.
            public var phone: Swift.String
            /// - Remark: Generated from `#/components/schemas/VerificationRequest/code`.
            public var code: Swift.String
            /// Creates a new `VerificationRequest`.
            ///
            /// - Parameters:
            ///   - phone:
            ///   - code:
            public init(
                phone: Swift.String,
                code: Swift.String
            ) {
                self.phone = phone
                self.code = code
            }
            public enum CodingKeys: String, CodingKey {
                case phone
                case code
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                phone = try container.decode(
                    Swift.String.self,
                    forKey: .phone
                )
                code = try container.decode(
                    Swift.String.self,
                    forKey: .code
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "phone",
                    "code"
                ])
            }
        }
        /// 회원가입 완료 요청 정보
        ///
        /// - Remark: Generated from `#/components/schemas/RegisterRequest`.
        public struct RegisterRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RegisterRequest/registerToken`.
            public var registerToken: Swift.String
            /// - Remark: Generated from `#/components/schemas/RegisterRequest/profile`.
            public var profile: Components.Schemas.Profile
            /// Creates a new `RegisterRequest`.
            ///
            /// - Parameters:
            ///   - registerToken:
            ///   - profile:
            public init(
                registerToken: Swift.String,
                profile: Components.Schemas.Profile
            ) {
                self.registerToken = registerToken
                self.profile = profile
            }
            public enum CodingKeys: String, CodingKey {
                case registerToken
                case profile
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                registerToken = try container.decode(
                    Swift.String.self,
                    forKey: .registerToken
                )
                profile = try container.decode(
                    Components.Schemas.Profile.self,
                    forKey: .profile
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "registerToken",
                    "profile"
                ])
            }
        }
        /// 토큰 갱신 요청 정보
        ///
        /// - Remark: Generated from `#/components/schemas/RefreshRequest`.
        public struct RefreshRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RefreshRequest/refreshToken`.
            public var refreshToken: Swift.String
            /// Creates a new `RefreshRequest`.
            ///
            /// - Parameters:
            ///   - refreshToken:
            public init(refreshToken: Swift.String) {
                self.refreshToken = refreshToken
            }
            public enum CodingKeys: String, CodingKey {
                case refreshToken
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                refreshToken = try container.decode(
                    Swift.String.self,
                    forKey: .refreshToken
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "refreshToken"
                ])
            }
        }
        /// 액세스 토큰 및 리프레시 토큰 응답
        ///
        /// - Remark: Generated from `#/components/schemas/TokenResponse`.
        public struct TokenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TokenResponse/accessToken`.
            public var accessToken: Swift.String
            /// - Remark: Generated from `#/components/schemas/TokenResponse/refreshToken`.
            public var refreshToken: Swift.String
            /// Creates a new `TokenResponse`.
            ///
            /// - Parameters:
            ///   - accessToken:
            ///   - refreshToken:
            public init(
                accessToken: Swift.String,
                refreshToken: Swift.String
            ) {
                self.accessToken = accessToken
                self.refreshToken = refreshToken
            }
            public enum CodingKeys: String, CodingKey {
                case accessToken
                case refreshToken
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                accessToken = try container.decode(
                    Swift.String.self,
                    forKey: .accessToken
                )
                refreshToken = try container.decode(
                    Swift.String.self,
                    forKey: .refreshToken
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "accessToken",
                    "refreshToken"
                ])
            }
        }
        /// Register Token 응답
        ///
        /// - Remark: Generated from `#/components/schemas/RegisterTokenResponse`.
        public struct RegisterTokenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RegisterTokenResponse/registerToken`.
            public var registerToken: Swift.String
            /// Creates a new `RegisterTokenResponse`.
            ///
            /// - Parameters:
            ///   - registerToken:
            public init(registerToken: Swift.String) {
                self.registerToken = registerToken
            }
            public enum CodingKeys: String, CodingKey {
                case registerToken
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                registerToken = try container.decode(
                    Swift.String.self,
                    forKey: .registerToken
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "registerToken"
                ])
            }
        }
        /// 사용자 프로필 정보
        ///
        /// - Remark: Generated from `#/components/schemas/Profile`.
        public struct Profile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Profile/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Profile/email`.
            public var email: Swift.String
            /// Creates a new `Profile`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            public init(
                name: Swift.String,
                email: Swift.String
            ) {
                self.name = name
                self.email = email
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                email = try container.decode(
                    Swift.String.self,
                    forKey: .email
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "name",
                    "email"
                ])
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// 휴대폰 번호 인증 요청
    ///
    /// 사용자의 휴대폰 번호로 인증 코드를 발송합니다.
    ///
    /// - Remark: HTTP `POST /auth/phone`.
    /// - Remark: Generated from `#/paths//auth/phone/post`.
    public enum post_sol_auth_sol_phone {
        public static let id: Swift.String = "post/auth/phone"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/phone/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/phone/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.PhoneRequest)
            }
            public var body: Operations.post_sol_auth_sol_phone.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - body:
            public init(body: Operations.post_sol_auth_sol_phone.Input.Body) {
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// 인증 코드가 성공적으로 발송됨
            ///
            /// - Remark: Generated from `#/paths//auth/phone/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_auth_sol_phone.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_auth_sol_phone.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// 유효하지 않은 휴대폰 번호
            ///
            /// - Remark: Generated from `#/paths//auth/phone/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.post_sol_auth_sol_phone.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.post_sol_auth_sol_phone.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// 인증 코드 확인
    ///
    /// 사용자가 입력한 인증 코드의 유효성을 확인합니다.
    ///
    /// - Remark: HTTP `POST /auth/verify`.
    /// - Remark: Generated from `#/paths//auth/verify/post`.
    public enum post_sol_auth_sol_verify {
        public static let id: Swift.String = "post/auth/verify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/verify/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_auth_sol_verify.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_auth_sol_verify.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_auth_sol_verify.Input.Headers
            /// - Remark: Generated from `#/paths/auth/verify/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/verify/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.VerificationRequest)
            }
            public var body: Operations.post_sol_auth_sol_verify.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_auth_sol_verify.Input.Headers = .init(),
                body: Operations.post_sol_auth_sol_verify.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/verify/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/verify/POST/responses/200/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/auth/verify/POST/responses/200/content/json/case1`.
                        case TokenResponse(Components.Schemas.TokenResponse)
                        /// - Remark: Generated from `#/paths/auth/verify/POST/responses/200/content/json/case2`.
                        case RegisterTokenResponse(Components.Schemas.RegisterTokenResponse)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .TokenResponse(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .RegisterTokenResponse(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .TokenResponse(value):
                                try value.encode(to: encoder)
                            case let .RegisterTokenResponse(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/auth/verify/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_auth_sol_verify.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_auth_sol_verify.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_auth_sol_verify.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_auth_sol_verify.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 휴대폰 번호 인증 성공
            ///
            /// - Remark: Generated from `#/paths//auth/verify/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_auth_sol_verify.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_auth_sol_verify.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// 유효하지 않은 인증 코드
            ///
            /// - Remark: Generated from `#/paths//auth/verify/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.post_sol_auth_sol_verify.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.post_sol_auth_sol_verify.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 회원가입 완료
    ///
    /// Register Token과 사용자 프로필 정보를 이용하여 회원가입을 완료합니다.
    ///
    /// - Remark: HTTP `POST /auth/register`.
    /// - Remark: Generated from `#/paths//auth/register/post`.
    public enum post_sol_auth_sol_register {
        public static let id: Swift.String = "post/auth/register"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/register/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_auth_sol_register.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_auth_sol_register.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_auth_sol_register.Input.Headers
            /// - Remark: Generated from `#/paths/auth/register/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/register/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.RegisterRequest)
            }
            public var body: Operations.post_sol_auth_sol_register.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_auth_sol_register.Input.Headers = .init(),
                body: Operations.post_sol_auth_sol_register.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/register/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/register/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_auth_sol_register.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_auth_sol_register.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 회원가입 성공
            ///
            /// - Remark: Generated from `#/paths//auth/register/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_auth_sol_register.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_auth_sol_register.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// 유효하지 않은 Register Token 또는 프로필 정보
            ///
            /// - Remark: Generated from `#/paths//auth/register/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.post_sol_auth_sol_register.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.post_sol_auth_sol_register.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 액세스 토큰 갱신
    ///
    /// 리프레시 토큰을 이용하여 새로운 액세스 토큰을 발급받습니다.
    ///
    /// - Remark: HTTP `POST /auth/refresh`.
    /// - Remark: Generated from `#/paths//auth/refresh/post`.
    public enum post_sol_auth_sol_refresh {
        public static let id: Swift.String = "post/auth/refresh"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/refresh/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_auth_sol_refresh.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_auth_sol_refresh.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_auth_sol_refresh.Input.Headers
            /// - Remark: Generated from `#/paths/auth/refresh/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/refresh/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.RefreshRequest)
            }
            public var body: Operations.post_sol_auth_sol_refresh.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_auth_sol_refresh.Input.Headers = .init(),
                body: Operations.post_sol_auth_sol_refresh.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/refresh/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/refresh/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_auth_sol_refresh.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_auth_sol_refresh.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 새로운 액세스 토큰 발급 성공
            ///
            /// - Remark: Generated from `#/paths//auth/refresh/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_auth_sol_refresh.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_auth_sol_refresh.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// 유효하지 않은 리프레시 토큰
            ///
            /// - Remark: Generated from `#/paths//auth/refresh/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.post_sol_auth_sol_refresh.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.post_sol_auth_sol_refresh.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
