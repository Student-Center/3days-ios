// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// SMS 인증 요청
    ///
    /// 회원 가입 또는 로그인을 위한 SMS 인증을 요청합니다.
    ///
    /// - Remark: HTTP `POST /auth/codes`.
    /// - Remark: Generated from `#/paths//auth/codes/post(requestVerification)`.
    func requestVerification(_ input: Operations.requestVerification.Input) async throws -> Operations.requestVerification.Output
    /// SMS 인증 코드 확인 (기존 유저)
    ///
    /// 발급된 인증 코드 아이디(authCodeId)와 SMS 인증 코드로 인증을 완료합니다.
    ///
    /// - Remark: HTTP `POST /auth/codes/{authCodeId}/existingUser`.
    /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/existingUser/post(existingUserVerifyCode)`.
    func existingUserVerifyCode(_ input: Operations.existingUserVerifyCode.Input) async throws -> Operations.existingUserVerifyCode.Output
    /// SMS 인증 코드 확인 (신규 유저)
    ///
    /// 발급된 인증 코드 아이디(authCodeId)와 SMS 인증 코드로 인증을 완료합니다.
    ///
    /// - Remark: HTTP `POST /auth/codes/{authCodeId}/newUser`.
    /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/newUser/post(newUserVerifyCode)`.
    func newUserVerifyCode(_ input: Operations.newUserVerifyCode.Input) async throws -> Operations.newUserVerifyCode.Output
    /// 회원 가입
    ///
    /// SMS 인증 후 발급된 registerToken으로 회원 가입을 완료합니다.
    ///
    /// - Remark: HTTP `POST /users`.
    /// - Remark: Generated from `#/paths//users/post(registerUser)`.
    func registerUser(_ input: Operations.registerUser.Input) async throws -> Operations.registerUser.Output
    /// 내 프로필 조회
    ///
    /// 현재 로그인한 사용자의 프로필 정보를 조회합니다.
    ///
    /// - Remark: HTTP `GET /users/my`.
    /// - Remark: Generated from `#/paths//users/my/get(getMyUserInfo)`.
    func getMyUserInfo(_ input: Operations.getMyUserInfo.Input) async throws -> Operations.getMyUserInfo.Output
    /// 액세스 토큰 갱신
    ///
    /// 리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급받습니다.
    ///
    /// - Remark: HTTP `POST /auth/token/refresh`.
    /// - Remark: Generated from `#/paths//auth/token/refresh/post(refreshToken)`.
    func refreshToken(_ input: Operations.refreshToken.Input) async throws -> Operations.refreshToken.Output
    /// 지역 목록 조회
    ///
    /// 시, 도 단위의 주요 행정 구역 목록을 조회합니다.
    ///
    /// - Remark: HTTP `GET /locations/regions`.
    /// - Remark: Generated from `#/paths//locations/regions/get(getLocationRegions)`.
    func getLocationRegions(_ input: Operations.getLocationRegions.Input) async throws -> Operations.getLocationRegions.Output
    /// 지역 목록 조회
    ///
    /// 시, 도 단위의 주요 지역을 기반으로 지역을 조회합니다.
    ///
    /// - Remark: HTTP `GET /locations/{regionName}`.
    /// - Remark: Generated from `#/paths//locations/{regionName}/get(getLocationsByRegion)`.
    func getLocationsByRegion(_ input: Operations.getLocationsByRegion.Input) async throws -> Operations.getLocationsByRegion.Output
    /// 직장명 검색
    ///
    /// 직장을 검색합니다.
    ///
    /// - Remark: HTTP `GET /companies`.
    /// - Remark: Generated from `#/paths//companies/get(searchCompanies)`.
    func searchCompanies(_ input: Operations.searchCompanies.Input) async throws -> Operations.searchCompanies.Output
    /// 직장 상세 정보 조회
    ///
    /// 직장 식별자에 해당하는 직장 상세 정보를 조회합니다.
    ///
    /// - Remark: HTTP `GET /companies/{companyId}`.
    /// - Remark: Generated from `#/paths//companies/{companyId}/get(getCompanyDetails)`.
    func getCompanyDetails(_ input: Operations.getCompanyDetails.Input) async throws -> Operations.getCompanyDetails.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// SMS 인증 요청
    ///
    /// 회원 가입 또는 로그인을 위한 SMS 인증을 요청합니다.
    ///
    /// - Remark: HTTP `POST /auth/codes`.
    /// - Remark: Generated from `#/paths//auth/codes/post(requestVerification)`.
    public func requestVerification(
        headers: Operations.requestVerification.Input.Headers,
        body: Operations.requestVerification.Input.Body
    ) async throws -> Operations.requestVerification.Output {
        try await requestVerification(Operations.requestVerification.Input(
            headers: headers,
            body: body
        ))
    }
    /// SMS 인증 코드 확인 (기존 유저)
    ///
    /// 발급된 인증 코드 아이디(authCodeId)와 SMS 인증 코드로 인증을 완료합니다.
    ///
    /// - Remark: HTTP `POST /auth/codes/{authCodeId}/existingUser`.
    /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/existingUser/post(existingUserVerifyCode)`.
    public func existingUserVerifyCode(
        path: Operations.existingUserVerifyCode.Input.Path,
        headers: Operations.existingUserVerifyCode.Input.Headers = .init(),
        body: Operations.existingUserVerifyCode.Input.Body
    ) async throws -> Operations.existingUserVerifyCode.Output {
        try await existingUserVerifyCode(Operations.existingUserVerifyCode.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// SMS 인증 코드 확인 (신규 유저)
    ///
    /// 발급된 인증 코드 아이디(authCodeId)와 SMS 인증 코드로 인증을 완료합니다.
    ///
    /// - Remark: HTTP `POST /auth/codes/{authCodeId}/newUser`.
    /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/newUser/post(newUserVerifyCode)`.
    public func newUserVerifyCode(
        path: Operations.newUserVerifyCode.Input.Path,
        headers: Operations.newUserVerifyCode.Input.Headers = .init(),
        body: Operations.newUserVerifyCode.Input.Body
    ) async throws -> Operations.newUserVerifyCode.Output {
        try await newUserVerifyCode(Operations.newUserVerifyCode.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// 회원 가입
    ///
    /// SMS 인증 후 발급된 registerToken으로 회원 가입을 완료합니다.
    ///
    /// - Remark: HTTP `POST /users`.
    /// - Remark: Generated from `#/paths//users/post(registerUser)`.
    public func registerUser(
        headers: Operations.registerUser.Input.Headers,
        body: Operations.registerUser.Input.Body
    ) async throws -> Operations.registerUser.Output {
        try await registerUser(Operations.registerUser.Input(
            headers: headers,
            body: body
        ))
    }
    /// 내 프로필 조회
    ///
    /// 현재 로그인한 사용자의 프로필 정보를 조회합니다.
    ///
    /// - Remark: HTTP `GET /users/my`.
    /// - Remark: Generated from `#/paths//users/my/get(getMyUserInfo)`.
    public func getMyUserInfo(headers: Operations.getMyUserInfo.Input.Headers = .init()) async throws -> Operations.getMyUserInfo.Output {
        try await getMyUserInfo(Operations.getMyUserInfo.Input(headers: headers))
    }
    /// 액세스 토큰 갱신
    ///
    /// 리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급받습니다.
    ///
    /// - Remark: HTTP `POST /auth/token/refresh`.
    /// - Remark: Generated from `#/paths//auth/token/refresh/post(refreshToken)`.
    public func refreshToken(
        headers: Operations.refreshToken.Input.Headers = .init(),
        body: Operations.refreshToken.Input.Body
    ) async throws -> Operations.refreshToken.Output {
        try await refreshToken(Operations.refreshToken.Input(
            headers: headers,
            body: body
        ))
    }
    /// 지역 목록 조회
    ///
    /// 시, 도 단위의 주요 행정 구역 목록을 조회합니다.
    ///
    /// - Remark: HTTP `GET /locations/regions`.
    /// - Remark: Generated from `#/paths//locations/regions/get(getLocationRegions)`.
    public func getLocationRegions(headers: Operations.getLocationRegions.Input.Headers = .init()) async throws -> Operations.getLocationRegions.Output {
        try await getLocationRegions(Operations.getLocationRegions.Input(headers: headers))
    }
    /// 지역 목록 조회
    ///
    /// 시, 도 단위의 주요 지역을 기반으로 지역을 조회합니다.
    ///
    /// - Remark: HTTP `GET /locations/{regionName}`.
    /// - Remark: Generated from `#/paths//locations/{regionName}/get(getLocationsByRegion)`.
    public func getLocationsByRegion(
        path: Operations.getLocationsByRegion.Input.Path,
        headers: Operations.getLocationsByRegion.Input.Headers = .init()
    ) async throws -> Operations.getLocationsByRegion.Output {
        try await getLocationsByRegion(Operations.getLocationsByRegion.Input(
            path: path,
            headers: headers
        ))
    }
    /// 직장명 검색
    ///
    /// 직장을 검색합니다.
    ///
    /// - Remark: HTTP `GET /companies`.
    /// - Remark: Generated from `#/paths//companies/get(searchCompanies)`.
    public func searchCompanies(
        query: Operations.searchCompanies.Input.Query,
        headers: Operations.searchCompanies.Input.Headers = .init()
    ) async throws -> Operations.searchCompanies.Output {
        try await searchCompanies(Operations.searchCompanies.Input(
            query: query,
            headers: headers
        ))
    }
    /// 직장 상세 정보 조회
    ///
    /// 직장 식별자에 해당하는 직장 상세 정보를 조회합니다.
    ///
    /// - Remark: HTTP `GET /companies/{companyId}`.
    /// - Remark: Generated from `#/paths//companies/{companyId}/get(getCompanyDetails)`.
    public func getCompanyDetails(
        path: Operations.getCompanyDetails.Input.Path,
        headers: Operations.getCompanyDetails.Input.Headers = .init()
    ) async throws -> Operations.getCompanyDetails.Output {
        try await getCompanyDetails(Operations.getCompanyDetails.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        public struct ErrorResponse: Codable, Hashable, Sendable {
            /// 에러 발생 시각 (ISO 8601)
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/time`.
            public var time: Foundation.Date
            /// 에러 유형
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/type`.
            public var _type: Swift.String
            /// 에러 코드
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/code`.
            public var code: Swift.String
            /// 상세 에러 메시지
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/message`.
            public var message: Swift.String?
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - time: 에러 발생 시각 (ISO 8601)
            ///   - _type: 에러 유형
            ///   - code: 에러 코드
            ///   - message: 상세 에러 메시지
            public init(
                time: Foundation.Date,
                _type: Swift.String,
                code: Swift.String,
                message: Swift.String? = nil
            ) {
                self.time = time
                self._type = _type
                self.code = code
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case time
                case _type = "type"
                case code
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/SendAuthCodeRequest`.
        public struct SendAuthCodeRequest: Codable, Hashable, Sendable {
            /// 사용자의 전화번호 (한국 휴대폰 번호 형식)
            ///
            /// - Remark: Generated from `#/components/schemas/SendAuthCodeRequest/phoneNumber`.
            public var phoneNumber: Swift.String
            /// Creates a new `SendAuthCodeRequest`.
            ///
            /// - Parameters:
            ///   - phoneNumber: 사용자의 전화번호 (한국 휴대폰 번호 형식)
            public init(phoneNumber: Swift.String) {
                self.phoneNumber = phoneNumber
            }
            public enum CodingKeys: String, CodingKey {
                case phoneNumber
            }
        }
        /// - Remark: Generated from `#/components/schemas/SendAuthCodeResponse`.
        public struct SendAuthCodeResponse: Codable, Hashable, Sendable {
            /// 인증 요청에 대한 고유 식별자 (UUID 형식)
            ///
            /// - Remark: Generated from `#/components/schemas/SendAuthCodeResponse/authCodeId`.
            public var authCodeId: Swift.String
            /// 사용자 상태 (신규 사용자 또는 기존 사용자)
            ///
            /// - Remark: Generated from `#/components/schemas/SendAuthCodeResponse/userStatus`.
            @frozen public enum userStatusPayload: String, Codable, Hashable, Sendable {
                case NEW = "NEW"
                case EXISTING = "EXISTING"
            }
            /// 사용자 상태 (신규 사용자 또는 기존 사용자)
            ///
            /// - Remark: Generated from `#/components/schemas/SendAuthCodeResponse/userStatus`.
            public var userStatus: Components.Schemas.SendAuthCodeResponse.userStatusPayload?
            /// Creates a new `SendAuthCodeResponse`.
            ///
            /// - Parameters:
            ///   - authCodeId: 인증 요청에 대한 고유 식별자 (UUID 형식)
            ///   - userStatus: 사용자 상태 (신규 사용자 또는 기존 사용자)
            public init(
                authCodeId: Swift.String,
                userStatus: Components.Schemas.SendAuthCodeResponse.userStatusPayload? = nil
            ) {
                self.authCodeId = authCodeId
                self.userStatus = userStatus
            }
            public enum CodingKeys: String, CodingKey {
                case authCodeId
                case userStatus
            }
        }
        /// - Remark: Generated from `#/components/schemas/VerifyCodeRequest`.
        public struct VerifyCodeRequest: Codable, Hashable, Sendable {
            /// 사용자가 입력한 SMS 인증 코드 (6자리 숫자)
            ///
            /// - Remark: Generated from `#/components/schemas/VerifyCodeRequest/verificationCode`.
            public var verificationCode: Swift.String
            /// Creates a new `VerifyCodeRequest`.
            ///
            /// - Parameters:
            ///   - verificationCode: 사용자가 입력한 SMS 인증 코드 (6자리 숫자)
            public init(verificationCode: Swift.String) {
                self.verificationCode = verificationCode
            }
            public enum CodingKeys: String, CodingKey {
                case verificationCode
            }
        }
        /// 기존 사용자 인증 응답
        ///
        /// - Remark: Generated from `#/components/schemas/ExistingUserVerifyCodeResponse`.
        public struct ExistingUserVerifyCodeResponse: Codable, Hashable, Sendable {
            /// 액세스 토큰
            ///
            /// - Remark: Generated from `#/components/schemas/ExistingUserVerifyCodeResponse/accessToken`.
            public var accessToken: Swift.String
            /// 리프레시 토큰
            ///
            /// - Remark: Generated from `#/components/schemas/ExistingUserVerifyCodeResponse/refreshToken`.
            public var refreshToken: Swift.String
            /// 액세스 토큰의 유효 기간 (초 단위)
            ///
            /// - Remark: Generated from `#/components/schemas/ExistingUserVerifyCodeResponse/accessTokenExpiresIn`.
            public var accessTokenExpiresIn: Swift.Int?
            /// 리프레시 토큰의 유효 기간 (초 단위)
            ///
            /// - Remark: Generated from `#/components/schemas/ExistingUserVerifyCodeResponse/refreshTokenExpiresIn`.
            public var refreshTokenExpiresIn: Swift.Int?
            /// Creates a new `ExistingUserVerifyCodeResponse`.
            ///
            /// - Parameters:
            ///   - accessToken: 액세스 토큰
            ///   - refreshToken: 리프레시 토큰
            ///   - accessTokenExpiresIn: 액세스 토큰의 유효 기간 (초 단위)
            ///   - refreshTokenExpiresIn: 리프레시 토큰의 유효 기간 (초 단위)
            public init(
                accessToken: Swift.String,
                refreshToken: Swift.String,
                accessTokenExpiresIn: Swift.Int? = nil,
                refreshTokenExpiresIn: Swift.Int? = nil
            ) {
                self.accessToken = accessToken
                self.refreshToken = refreshToken
                self.accessTokenExpiresIn = accessTokenExpiresIn
                self.refreshTokenExpiresIn = refreshTokenExpiresIn
            }
            public enum CodingKeys: String, CodingKey {
                case accessToken
                case refreshToken
                case accessTokenExpiresIn
                case refreshTokenExpiresIn
            }
        }
        /// 새 사용자 인증 응답
        ///
        /// - Remark: Generated from `#/components/schemas/NewUserVerifyCodeResponse`.
        public struct NewUserVerifyCodeResponse: Codable, Hashable, Sendable {
            /// 회원 가입 토큰의 유효 기간 (초 단위)
            ///
            /// - Remark: Generated from `#/components/schemas/NewUserVerifyCodeResponse/expiresIn`.
            public var expiresIn: Swift.Int?
            /// 회원 가입을 위한 토큰
            ///
            /// - Remark: Generated from `#/components/schemas/NewUserVerifyCodeResponse/registerToken`.
            public var registerToken: Swift.String
            /// Creates a new `NewUserVerifyCodeResponse`.
            ///
            /// - Parameters:
            ///   - expiresIn: 회원 가입 토큰의 유효 기간 (초 단위)
            ///   - registerToken: 회원 가입을 위한 토큰
            public init(
                expiresIn: Swift.Int? = nil,
                registerToken: Swift.String
            ) {
                self.expiresIn = expiresIn
                self.registerToken = registerToken
            }
            public enum CodingKeys: String, CodingKey {
                case expiresIn
                case registerToken
            }
        }
        /// 회원 가입 시 필요한 사용자 정보
        ///
        /// - Remark: Generated from `#/components/schemas/RegisterUserRequest`.
        public struct RegisterUserRequest: Codable, Hashable, Sendable {
            /// 사용자 이름
            ///
            /// - Remark: Generated from `#/components/schemas/RegisterUserRequest/name`.
            public var name: Swift.String
            /// 사용자 전화번호
            ///
            /// - Remark: Generated from `#/components/schemas/RegisterUserRequest/phoneNumber`.
            public var phoneNumber: Swift.String
            /// - Remark: Generated from `#/components/schemas/RegisterUserRequest/profile`.
            public var profile: Components.Schemas.UserProfile
            /// - Remark: Generated from `#/components/schemas/RegisterUserRequest/desiredPartner`.
            public var desiredPartner: Components.Schemas.UserDesiredPartner
            /// Creates a new `RegisterUserRequest`.
            ///
            /// - Parameters:
            ///   - name: 사용자 이름
            ///   - phoneNumber: 사용자 전화번호
            ///   - profile:
            ///   - desiredPartner:
            public init(
                name: Swift.String,
                phoneNumber: Swift.String,
                profile: Components.Schemas.UserProfile,
                desiredPartner: Components.Schemas.UserDesiredPartner
            ) {
                self.name = name
                self.phoneNumber = phoneNumber
                self.profile = profile
                self.desiredPartner = desiredPartner
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case phoneNumber
                case profile
                case desiredPartner
            }
        }
        /// - Remark: Generated from `#/components/schemas/GetMyUserInfoResponse`.
        public struct GetMyUserInfoResponse: Codable, Hashable, Sendable {
            /// 사용자 식별자
            ///
            /// - Remark: Generated from `#/components/schemas/GetMyUserInfoResponse/id`.
            public var id: Swift.String?
            /// 사용자 이름
            ///
            /// - Remark: Generated from `#/components/schemas/GetMyUserInfoResponse/name`.
            public var name: Swift.String
            /// 사용자의 전화번호 (한국 휴대폰 번호 형식)
            ///
            /// - Remark: Generated from `#/components/schemas/GetMyUserInfoResponse/phoneNumber`.
            public var phoneNumber: Swift.String
            /// - Remark: Generated from `#/components/schemas/GetMyUserInfoResponse/profile`.
            public var profile: Components.Schemas.UserProfile
            /// - Remark: Generated from `#/components/schemas/GetMyUserInfoResponse/desiredPartner`.
            public var desiredPartner: Components.Schemas.UserDesiredPartner
            /// Creates a new `GetMyUserInfoResponse`.
            ///
            /// - Parameters:
            ///   - id: 사용자 식별자
            ///   - name: 사용자 이름
            ///   - phoneNumber: 사용자의 전화번호 (한국 휴대폰 번호 형식)
            ///   - profile:
            ///   - desiredPartner:
            public init(
                id: Swift.String? = nil,
                name: Swift.String,
                phoneNumber: Swift.String,
                profile: Components.Schemas.UserProfile,
                desiredPartner: Components.Schemas.UserDesiredPartner
            ) {
                self.id = id
                self.name = name
                self.phoneNumber = phoneNumber
                self.profile = profile
                self.desiredPartner = desiredPartner
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case phoneNumber
                case profile
                case desiredPartner
            }
        }
        /// 사용자 프로필 정보
        ///
        /// - Remark: Generated from `#/components/schemas/UserProfile`.
        public struct UserProfile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserProfile/gender`.
            public var gender: Components.Schemas.Gender
            /// 사용자의 출생년도
            ///
            /// - Remark: Generated from `#/components/schemas/UserProfile/birthYear`.
            public var birthYear: Swift.Int
            /// 사용자의 회사 ID
            ///
            /// - Remark: Generated from `#/components/schemas/UserProfile/companyId`.
            public var companyId: Swift.String
            /// - Remark: Generated from `#/components/schemas/UserProfile/jobOccupation`.
            public var jobOccupation: Components.Schemas.JobOccupation
            /// 사용자의 활동 지역 목록 ID 리스트
            ///
            /// - Remark: Generated from `#/components/schemas/UserProfile/locationIds`.
            public var locationIds: [Swift.String]
            /// Creates a new `UserProfile`.
            ///
            /// - Parameters:
            ///   - gender:
            ///   - birthYear: 사용자의 출생년도
            ///   - companyId: 사용자의 회사 ID
            ///   - jobOccupation:
            ///   - locationIds: 사용자의 활동 지역 목록 ID 리스트
            public init(
                gender: Components.Schemas.Gender,
                birthYear: Swift.Int,
                companyId: Swift.String,
                jobOccupation: Components.Schemas.JobOccupation,
                locationIds: [Swift.String]
            ) {
                self.gender = gender
                self.birthYear = birthYear
                self.companyId = companyId
                self.jobOccupation = jobOccupation
                self.locationIds = locationIds
            }
            public enum CodingKeys: String, CodingKey {
                case gender
                case birthYear
                case companyId
                case jobOccupation
                case locationIds
            }
        }
        /// 사용자가 원하는 파트너의 조건
        ///
        /// - Remark: Generated from `#/components/schemas/UserDesiredPartner`.
        public struct UserDesiredPartner: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserDesiredPartner/birthYearRange`.
            public var birthYearRange: Components.Schemas.BirthYearRange?
            /// - Remark: Generated from `#/components/schemas/UserDesiredPartner/jobOccupations`.
            public var jobOccupations: Components.Schemas.JobOccupations
            /// - Remark: Generated from `#/components/schemas/UserDesiredPartner/preferDistance`.
            public var preferDistance: Components.Schemas.PreferDistance
            /// Creates a new `UserDesiredPartner`.
            ///
            /// - Parameters:
            ///   - birthYearRange:
            ///   - jobOccupations:
            ///   - preferDistance:
            public init(
                birthYearRange: Components.Schemas.BirthYearRange? = nil,
                jobOccupations: Components.Schemas.JobOccupations,
                preferDistance: Components.Schemas.PreferDistance
            ) {
                self.birthYearRange = birthYearRange
                self.jobOccupations = jobOccupations
                self.preferDistance = preferDistance
            }
            public enum CodingKeys: String, CodingKey {
                case birthYearRange
                case jobOccupations
                case preferDistance
            }
        }
        /// - Remark: Generated from `#/components/schemas/BirthYearRange`.
        public struct BirthYearRange: Codable, Hashable, Sendable {
            /// 원하는 파트너의 최소 년생
            ///
            /// - Remark: Generated from `#/components/schemas/BirthYearRange/start`.
            public var start: Swift.Int
            /// 원하는 파트너의 최대 년생
            ///
            /// - Remark: Generated from `#/components/schemas/BirthYearRange/end`.
            public var end: Swift.Int
            /// Creates a new `BirthYearRange`.
            ///
            /// - Parameters:
            ///   - start: 원하는 파트너의 최소 년생
            ///   - end: 원하는 파트너의 최대 년생
            public init(
                start: Swift.Int,
                end: Swift.Int
            ) {
                self.start = start
                self.end = end
            }
            public enum CodingKeys: String, CodingKey {
                case start
                case end
            }
        }
        /// - Remark: Generated from `#/components/schemas/RefreshTokenRequest`.
        public struct RefreshTokenRequest: Codable, Hashable, Sendable {
            /// 유효한 리프레시 토큰
            ///
            /// - Remark: Generated from `#/components/schemas/RefreshTokenRequest/refreshToken`.
            public var refreshToken: Swift.String
            /// Creates a new `RefreshTokenRequest`.
            ///
            /// - Parameters:
            ///   - refreshToken: 유효한 리프레시 토큰
            public init(refreshToken: Swift.String) {
                self.refreshToken = refreshToken
            }
            public enum CodingKeys: String, CodingKey {
                case refreshToken
            }
        }
        /// - Remark: Generated from `#/components/schemas/RegisterUserResponse`.
        public typealias RegisterUserResponse = Components.Schemas.TokenResponse
        /// - Remark: Generated from `#/components/schemas/RefreshTokenResponse`.
        public typealias RefreshTokenResponse = Components.Schemas.TokenResponse
        /// 토큰 발급 응답
        ///
        /// - Remark: Generated from `#/components/schemas/TokenResponse`.
        public struct TokenResponse: Codable, Hashable, Sendable {
            /// 액세스 토큰
            ///
            /// - Remark: Generated from `#/components/schemas/TokenResponse/accessToken`.
            public var accessToken: Swift.String
            /// 리프레시 토큰
            ///
            /// - Remark: Generated from `#/components/schemas/TokenResponse/refreshToken`.
            public var refreshToken: Swift.String
            /// 액세스 토큰의 유효 기간 (초 단위)
            ///
            /// - Remark: Generated from `#/components/schemas/TokenResponse/expiresIn`.
            public var expiresIn: Swift.Int
            /// Creates a new `TokenResponse`.
            ///
            /// - Parameters:
            ///   - accessToken: 액세스 토큰
            ///   - refreshToken: 리프레시 토큰
            ///   - expiresIn: 액세스 토큰의 유효 기간 (초 단위)
            public init(
                accessToken: Swift.String,
                refreshToken: Swift.String,
                expiresIn: Swift.Int
            ) {
                self.accessToken = accessToken
                self.refreshToken = refreshToken
                self.expiresIn = expiresIn
            }
            public enum CodingKeys: String, CodingKey {
                case accessToken
                case refreshToken
                case expiresIn
            }
        }
        /// - Remark: Generated from `#/components/schemas/GetLocationRegionsResponse`.
        public typealias GetLocationRegionsResponse = [Swift.String]
        /// - Remark: Generated from `#/components/schemas/Location`.
        public struct Location: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Location/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Location/region`.
            public var region: Swift.String
            /// - Remark: Generated from `#/components/schemas/Location/subRegion`.
            public var subRegion: Swift.String
            /// Creates a new `Location`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - region:
            ///   - subRegion:
            public init(
                id: Swift.String,
                region: Swift.String,
                subRegion: Swift.String
            ) {
                self.id = id
                self.region = region
                self.subRegion = subRegion
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case region
                case subRegion
            }
        }
        /// - Remark: Generated from `#/components/schemas/SearchCompaniesResponse`.
        public struct SearchCompaniesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SearchCompaniesResponse/companies`.
            public var companies: [Components.Schemas.Company]
            /// 다음 페이지를 위한 키, 더 이상 결과가 없으면 null
            ///
            /// - Remark: Generated from `#/components/schemas/SearchCompaniesResponse/next`.
            public var next: Swift.String?
            /// Creates a new `SearchCompaniesResponse`.
            ///
            /// - Parameters:
            ///   - companies:
            ///   - next: 다음 페이지를 위한 키, 더 이상 결과가 없으면 null
            public init(
                companies: [Components.Schemas.Company],
                next: Swift.String? = nil
            ) {
                self.companies = companies
                self.next = next
            }
            public enum CodingKeys: String, CodingKey {
                case companies
                case next
            }
        }
        /// - Remark: Generated from `#/components/schemas/GetCompanyDetailsResponse`.
        public struct GetCompanyDetailsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GetCompanyDetailsResponse/company`.
            public var company: Components.Schemas.Company
            /// Creates a new `GetCompanyDetailsResponse`.
            ///
            /// - Parameters:
            ///   - company:
            public init(company: Components.Schemas.Company) {
                self.company = company
            }
            public enum CodingKeys: String, CodingKey {
                case company
            }
        }
        /// - Remark: Generated from `#/components/schemas/Company`.
        public struct Company: Codable, Hashable, Sendable {
            /// 회사 식별자
            ///
            /// - Remark: Generated from `#/components/schemas/Company/id`.
            public var id: Swift.String
            /// 회사명
            ///
            /// - Remark: Generated from `#/components/schemas/Company/name`.
            public var name: Swift.String
            /// Creates a new `Company`.
            ///
            /// - Parameters:
            ///   - id: 회사 식별자
            ///   - name: 회사명
            public init(
                id: Swift.String,
                name: Swift.String
            ) {
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
            }
        }
        /// 사용자의 운영 체제 유형
        ///
        /// - Remark: Generated from `#/components/schemas/OSType`.
        @frozen public enum OSType: String, Codable, Hashable, Sendable {
            case IOS = "IOS"
            case AOS = "AOS"
        }
        /// 사용자의 성별
        ///
        /// - Remark: Generated from `#/components/schemas/Gender`.
        @frozen public enum Gender: String, Codable, Hashable, Sendable {
            case MALE = "MALE"
            case FEMALE = "FEMALE"
        }
        /// 직업군 분류
        ///
        /// - Remark: Generated from `#/components/schemas/JobOccupation`.
        @frozen public enum JobOccupation: String, Codable, Hashable, Sendable {
            case BUSINESS_ADMIN = "BUSINESS_ADMIN"
            case SALES_MARKETING = "SALES_MARKETING"
            case RESEARCH_DEVELOPMENT = "RESEARCH_DEVELOPMENT"
            case IT_INFORMATION = "IT_INFORMATION"
            case FINANCE_ACCOUNTING = "FINANCE_ACCOUNTING"
            case MANUFACTURING_PRODUCTION = "MANUFACTURING_PRODUCTION"
            case EDUCATION_ACADEMIA = "EDUCATION_ACADEMIA"
            case LAW_ADMINISTRATION = "LAW_ADMINISTRATION"
            case MILITARY_SECURITY = "MILITARY_SECURITY"
            case HEALTHCARE_MEDICAL = "HEALTHCARE_MEDICAL"
            case MEDIA_ENTERTAINMENT = "MEDIA_ENTERTAINMENT"
            case ARTS_DESIGN = "ARTS_DESIGN"
            case SPORTS = "SPORTS"
            case CONSTRUCTION_ENGINEERING = "CONSTRUCTION_ENGINEERING"
            case TRANSPORTATION_LOGISTICS = "TRANSPORTATION_LOGISTICS"
            case AGRICULTURE_FARMING = "AGRICULTURE_FARMING"
            case SERVICE_INDUSTRY = "SERVICE_INDUSTRY"
            case OTHER = "OTHER"
        }
        /// - Remark: Generated from `#/components/schemas/JobOccupations`.
        public typealias JobOccupations = [Components.Schemas.JobOccupation]
        /// 선호하는 거리 (내 지역만, 주변 지역 포함, 어디든)
        ///
        /// - Remark: Generated from `#/components/schemas/PreferDistance`.
        @frozen public enum PreferDistance: String, Codable, Hashable, Sendable {
            case ONLY_MY_AREA = "ONLY_MY_AREA"
            case INCLUDE_SURROUNDING_REGIONS = "INCLUDE_SURROUNDING_REGIONS"
            case ANYWHERE = "ANYWHERE"
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// 사용자의 OS 유형 (IOS 또는 AOS)
        ///
        /// - Remark: Generated from `#/components/parameters/OSTypeHeader`.
        public typealias OSTypeHeader = Components.Schemas.OSType
        /// 번호 인증 후 발급받은 회원가입용 토큰
        ///
        /// - Remark: Generated from `#/components/parameters/RegisterTokenHeader`.
        public typealias RegisterTokenHeader = Swift.String
        /// 인증 요청 시 발급된 고유 식별자 (UUID 형식)
        ///
        /// - Remark: Generated from `#/components/parameters/AuthCodeIdPath`.
        public typealias AuthCodeIdPath = Swift.String
        /// 검색할 이름
        ///
        /// - Remark: Generated from `#/components/parameters/NameQuery`.
        public typealias NameQuery = Swift.String
        /// 페이지네이션을 위한 다음 검색 시작 ID
        ///
        /// - Remark: Generated from `#/components/parameters/NextQuery`.
        public typealias NextQuery = Swift.String
        /// 반환할 최대 결과 수
        ///
        /// - Remark: Generated from `#/components/parameters/LimitQuery`.
        public typealias LimitQuery = Swift.Int
        /// 조회할 회사의 고유 식별자
        ///
        /// - Remark: Generated from `#/components/parameters/CompanyIdPath`.
        public typealias CompanyIdPath = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct BadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/BadRequest/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/BadRequest/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.BadRequest.Body
            /// Creates a new `BadRequest`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.BadRequest.Body) {
                self.body = body
            }
        }
        public struct RegisterTokenExpired: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/RegisterTokenExpired/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/RegisterTokenExpired/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.RegisterTokenExpired.Body
            /// Creates a new `RegisterTokenExpired`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.RegisterTokenExpired.Body) {
                self.body = body
            }
        }
        public struct NotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/NotFound/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/NotFound/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.NotFound.Body
            /// Creates a new `NotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.NotFound.Body) {
                self.body = body
            }
        }
        public struct Unauthorized: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Unauthorized/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Unauthorized/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.Unauthorized.Body
            /// Creates a new `Unauthorized`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.Unauthorized.Body) {
                self.body = body
            }
        }
        public struct InternalServerError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InternalServerError/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InternalServerError/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InternalServerError.Body
            /// Creates a new `InternalServerError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InternalServerError.Body) {
                self.body = body
            }
        }
        public struct RefreshTokenExpired: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/RefreshTokenExpired/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/RefreshTokenExpired/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.RefreshTokenExpired.Body
            /// Creates a new `RefreshTokenExpired`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.RefreshTokenExpired.Body) {
                self.body = body
            }
        }
        public struct InvalidRefreshToken: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InvalidRefreshToken/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InvalidRefreshToken/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InvalidRefreshToken.Body
            /// Creates a new `InvalidRefreshToken`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InvalidRefreshToken.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// SMS 인증 요청
    ///
    /// 회원 가입 또는 로그인을 위한 SMS 인증을 요청합니다.
    ///
    /// - Remark: HTTP `POST /auth/codes`.
    /// - Remark: Generated from `#/paths//auth/codes/post(requestVerification)`.
    public enum requestVerification {
        public static let id: Swift.String = "requestVerification"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/codes/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// 사용자의 OS 유형 (IOS 또는 AOS)
                ///
                /// - Remark: Generated from `#/paths/auth/codes/POST/header/X-OS-Type`.
                public var X_hyphen_OS_hyphen_Type: Components.Parameters.OSTypeHeader
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.requestVerification.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_OS_hyphen_Type: 사용자의 OS 유형 (IOS 또는 AOS)
                ///   - accept:
                public init(
                    X_hyphen_OS_hyphen_Type: Components.Parameters.OSTypeHeader,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.requestVerification.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_OS_hyphen_Type = X_hyphen_OS_hyphen_Type
                    self.accept = accept
                }
            }
            public var headers: Operations.requestVerification.Input.Headers
            /// - Remark: Generated from `#/paths/auth/codes/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/codes/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SendAuthCodeRequest)
            }
            public var body: Operations.requestVerification.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.requestVerification.Input.Headers,
                body: Operations.requestVerification.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/codes/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/codes/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.SendAuthCodeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SendAuthCodeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.requestVerification.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.requestVerification.Output.Created.Body) {
                    self.body = body
                }
            }
            /// 인증 요청 성공
            ///
            /// - Remark: Generated from `#/paths//auth/codes/post(requestVerification)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.requestVerification.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.requestVerification.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// 잘못된 요청
            ///
            /// - Remark: Generated from `#/paths//auth/codes/post(requestVerification)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// SMS 인증 코드 확인 (기존 유저)
    ///
    /// 발급된 인증 코드 아이디(authCodeId)와 SMS 인증 코드로 인증을 완료합니다.
    ///
    /// - Remark: HTTP `POST /auth/codes/{authCodeId}/existingUser`.
    /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/existingUser/post(existingUserVerifyCode)`.
    public enum existingUserVerifyCode {
        public static let id: Swift.String = "existingUserVerifyCode"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/existingUser/POST/path`.
            public struct Path: Sendable, Hashable {
                /// 인증 요청 시 발급된 고유 식별자 (UUID 형식)
                ///
                /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/existingUser/POST/path/authCodeId`.
                public var authCodeId: Components.Parameters.AuthCodeIdPath
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - authCodeId: 인증 요청 시 발급된 고유 식별자 (UUID 형식)
                public init(authCodeId: Components.Parameters.AuthCodeIdPath) {
                    self.authCodeId = authCodeId
                }
            }
            public var path: Operations.existingUserVerifyCode.Input.Path
            /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/existingUser/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.existingUserVerifyCode.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.existingUserVerifyCode.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.existingUserVerifyCode.Input.Headers
            /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/existingUser/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/existingUser/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.VerifyCodeRequest)
            }
            public var body: Operations.existingUserVerifyCode.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.existingUserVerifyCode.Input.Path,
                headers: Operations.existingUserVerifyCode.Input.Headers = .init(),
                body: Operations.existingUserVerifyCode.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/existingUser/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/existingUser/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ExistingUserVerifyCodeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ExistingUserVerifyCodeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.existingUserVerifyCode.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.existingUserVerifyCode.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 인증 완료 및 토큰 발급
            ///
            /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/existingUser/post(existingUserVerifyCode)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.existingUserVerifyCode.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.existingUserVerifyCode.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// 잘못된 요청
            ///
            /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/existingUser/post(existingUserVerifyCode)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// 리소스를 찾을 수 없음
            ///
            /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/existingUser/post(existingUserVerifyCode)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// 서버 오류
            ///
            /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/existingUser/post(existingUserVerifyCode)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// SMS 인증 코드 확인 (신규 유저)
    ///
    /// 발급된 인증 코드 아이디(authCodeId)와 SMS 인증 코드로 인증을 완료합니다.
    ///
    /// - Remark: HTTP `POST /auth/codes/{authCodeId}/newUser`.
    /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/newUser/post(newUserVerifyCode)`.
    public enum newUserVerifyCode {
        public static let id: Swift.String = "newUserVerifyCode"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/newUser/POST/path`.
            public struct Path: Sendable, Hashable {
                /// 인증 요청 시 발급된 고유 식별자 (UUID 형식)
                ///
                /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/newUser/POST/path/authCodeId`.
                public var authCodeId: Components.Parameters.AuthCodeIdPath
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - authCodeId: 인증 요청 시 발급된 고유 식별자 (UUID 형식)
                public init(authCodeId: Components.Parameters.AuthCodeIdPath) {
                    self.authCodeId = authCodeId
                }
            }
            public var path: Operations.newUserVerifyCode.Input.Path
            /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/newUser/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.newUserVerifyCode.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.newUserVerifyCode.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.newUserVerifyCode.Input.Headers
            /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/newUser/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/newUser/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.VerifyCodeRequest)
            }
            public var body: Operations.newUserVerifyCode.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.newUserVerifyCode.Input.Path,
                headers: Operations.newUserVerifyCode.Input.Headers = .init(),
                body: Operations.newUserVerifyCode.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/newUser/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/codes/{authCodeId}/newUser/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.NewUserVerifyCodeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NewUserVerifyCodeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.newUserVerifyCode.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.newUserVerifyCode.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 인증 완료 및 토큰 발급
            ///
            /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/newUser/post(newUserVerifyCode)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.newUserVerifyCode.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.newUserVerifyCode.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// 잘못된 요청
            ///
            /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/newUser/post(newUserVerifyCode)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// 리소스를 찾을 수 없음
            ///
            /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/newUser/post(newUserVerifyCode)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// 서버 오류
            ///
            /// - Remark: Generated from `#/paths//auth/codes/{authCodeId}/newUser/post(newUserVerifyCode)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 회원 가입
    ///
    /// SMS 인증 후 발급된 registerToken으로 회원 가입을 완료합니다.
    ///
    /// - Remark: HTTP `POST /users`.
    /// - Remark: Generated from `#/paths//users/post(registerUser)`.
    public enum registerUser {
        public static let id: Swift.String = "registerUser"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// 번호 인증 후 발급받은 회원가입용 토큰
                ///
                /// - Remark: Generated from `#/paths/users/POST/header/X-Register-Token`.
                public var X_hyphen_Register_hyphen_Token: Components.Parameters.RegisterTokenHeader
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.registerUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Register_hyphen_Token: 번호 인증 후 발급받은 회원가입용 토큰
                ///   - accept:
                public init(
                    X_hyphen_Register_hyphen_Token: Components.Parameters.RegisterTokenHeader,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.registerUser.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Register_hyphen_Token = X_hyphen_Register_hyphen_Token
                    self.accept = accept
                }
            }
            public var headers: Operations.registerUser.Input.Headers
            /// - Remark: Generated from `#/paths/users/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.RegisterUserRequest)
            }
            public var body: Operations.registerUser.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.registerUser.Input.Headers,
                body: Operations.registerUser.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// 새로 생성된 사용자 리소스의 URL
                    ///
                    /// - Remark: Generated from `#/paths/users/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location: 새로 생성된 사용자 리소스의 URL
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.registerUser.Output.Created.Headers
                /// - Remark: Generated from `#/paths/users/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.RegisterUserResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RegisterUserResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.registerUser.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.registerUser.Output.Created.Headers = .init(),
                    body: Operations.registerUser.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// 회원 가입 성공
            ///
            /// - Remark: Generated from `#/paths//users/post(registerUser)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.registerUser.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.registerUser.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// 잘못된 요청
            ///
            /// - Remark: Generated from `#/paths//users/post(registerUser)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// 회원 가입 토큰 만료
            ///
            /// - Remark: Generated from `#/paths//users/post(registerUser)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RegisterTokenExpired)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.RegisterTokenExpired {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// 서버 오류
            ///
            /// - Remark: Generated from `#/paths//users/post(registerUser)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 내 프로필 조회
    ///
    /// 현재 로그인한 사용자의 프로필 정보를 조회합니다.
    ///
    /// - Remark: HTTP `GET /users/my`.
    /// - Remark: Generated from `#/paths//users/my/get(getMyUserInfo)`.
    public enum getMyUserInfo {
        public static let id: Swift.String = "getMyUserInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/my/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getMyUserInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getMyUserInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getMyUserInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getMyUserInfo.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/my/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/my/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.GetMyUserInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.GetMyUserInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getMyUserInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getMyUserInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 조회 성공
            ///
            /// - Remark: Generated from `#/paths//users/my/get(getMyUserInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getMyUserInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getMyUserInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// 인증 실패 (토큰 만료 또는 유효하지 않은 토큰)
            ///
            /// - Remark: Generated from `#/paths//users/my/get(getMyUserInfo)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// 서버 오류
            ///
            /// - Remark: Generated from `#/paths//users/my/get(getMyUserInfo)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 액세스 토큰 갱신
    ///
    /// 리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급받습니다.
    ///
    /// - Remark: HTTP `POST /auth/token/refresh`.
    /// - Remark: Generated from `#/paths//auth/token/refresh/post(refreshToken)`.
    public enum refreshToken {
        public static let id: Swift.String = "refreshToken"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/token/refresh/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.refreshToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.refreshToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.refreshToken.Input.Headers
            /// - Remark: Generated from `#/paths/auth/token/refresh/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/token/refresh/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.RefreshTokenRequest)
            }
            public var body: Operations.refreshToken.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.refreshToken.Input.Headers = .init(),
                body: Operations.refreshToken.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/token/refresh/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/token/refresh/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RefreshTokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RefreshTokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.refreshToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.refreshToken.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 토큰 갱신 성공
            ///
            /// - Remark: Generated from `#/paths//auth/token/refresh/post(refreshToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.refreshToken.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.refreshToken.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// 유효하지 않은 리프레시 토큰
            ///
            /// - Remark: Generated from `#/paths//auth/token/refresh/post(refreshToken)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.InvalidRefreshToken)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.InvalidRefreshToken {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// 리프레시 토큰 만료
            ///
            /// - Remark: Generated from `#/paths//auth/token/refresh/post(refreshToken)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RefreshTokenExpired)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.RefreshTokenExpired {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// 서버 오류
            ///
            /// - Remark: Generated from `#/paths//auth/token/refresh/post(refreshToken)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 지역 목록 조회
    ///
    /// 시, 도 단위의 주요 행정 구역 목록을 조회합니다.
    ///
    /// - Remark: HTTP `GET /locations/regions`.
    /// - Remark: Generated from `#/paths//locations/regions/get(getLocationRegions)`.
    public enum getLocationRegions {
        public static let id: Swift.String = "getLocationRegions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/locations/regions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLocationRegions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLocationRegions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getLocationRegions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getLocationRegions.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/locations/regions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/locations/regions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.GetLocationRegionsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.GetLocationRegionsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getLocationRegions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getLocationRegions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 조회 성공
            ///
            /// - Remark: Generated from `#/paths//locations/regions/get(getLocationRegions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getLocationRegions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getLocationRegions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// 서버 오류
            ///
            /// - Remark: Generated from `#/paths//locations/regions/get(getLocationRegions)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 지역 목록 조회
    ///
    /// 시, 도 단위의 주요 지역을 기반으로 지역을 조회합니다.
    ///
    /// - Remark: HTTP `GET /locations/{regionName}`.
    /// - Remark: Generated from `#/paths//locations/{regionName}/get(getLocationsByRegion)`.
    public enum getLocationsByRegion {
        public static let id: Swift.String = "getLocationsByRegion"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/locations/{regionName}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// 조회할 지역의 시, 도 이름
                ///
                /// - Remark: Generated from `#/paths/locations/{regionName}/GET/path/regionName`.
                public var regionName: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - regionName: 조회할 지역의 시, 도 이름
                public init(regionName: Swift.String) {
                    self.regionName = regionName
                }
            }
            public var path: Operations.getLocationsByRegion.Input.Path
            /// - Remark: Generated from `#/paths/locations/{regionName}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLocationsByRegion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLocationsByRegion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getLocationsByRegion.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getLocationsByRegion.Input.Path,
                headers: Operations.getLocationsByRegion.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/locations/{regionName}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/locations/{regionName}/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Location])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Location] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getLocationsByRegion.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getLocationsByRegion.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 조회 성공
            ///
            /// - Remark: Generated from `#/paths//locations/{regionName}/get(getLocationsByRegion)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getLocationsByRegion.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getLocationsByRegion.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// 리소스를 찾을 수 없음
            ///
            /// - Remark: Generated from `#/paths//locations/{regionName}/get(getLocationsByRegion)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// 서버 오류
            ///
            /// - Remark: Generated from `#/paths//locations/{regionName}/get(getLocationsByRegion)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 직장명 검색
    ///
    /// 직장을 검색합니다.
    ///
    /// - Remark: HTTP `GET /companies`.
    /// - Remark: Generated from `#/paths//companies/get(searchCompanies)`.
    public enum searchCompanies {
        public static let id: Swift.String = "searchCompanies"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/companies/GET/query`.
            public struct Query: Sendable, Hashable {
                /// 검색할 이름
                ///
                /// - Remark: Generated from `#/paths/companies/GET/query/name`.
                public var name: Components.Parameters.NameQuery
                /// 페이지네이션을 위한 다음 검색 시작 ID
                ///
                /// - Remark: Generated from `#/paths/companies/GET/query/next`.
                public var next: Components.Parameters.NextQuery?
                /// 반환할 최대 결과 수
                ///
                /// - Remark: Generated from `#/paths/companies/GET/query/limit`.
                public var limit: Components.Parameters.LimitQuery?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: 검색할 이름
                ///   - next: 페이지네이션을 위한 다음 검색 시작 ID
                ///   - limit: 반환할 최대 결과 수
                public init(
                    name: Components.Parameters.NameQuery,
                    next: Components.Parameters.NextQuery? = nil,
                    limit: Components.Parameters.LimitQuery? = nil
                ) {
                    self.name = name
                    self.next = next
                    self.limit = limit
                }
            }
            public var query: Operations.searchCompanies.Input.Query
            /// - Remark: Generated from `#/paths/companies/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.searchCompanies.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.searchCompanies.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.searchCompanies.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.searchCompanies.Input.Query,
                headers: Operations.searchCompanies.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/companies/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/companies/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SearchCompaniesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SearchCompaniesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.searchCompanies.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.searchCompanies.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 검색 성공
            ///
            /// - Remark: Generated from `#/paths//companies/get(searchCompanies)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.searchCompanies.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.searchCompanies.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// 서버 오류
            ///
            /// - Remark: Generated from `#/paths//companies/get(searchCompanies)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 직장 상세 정보 조회
    ///
    /// 직장 식별자에 해당하는 직장 상세 정보를 조회합니다.
    ///
    /// - Remark: HTTP `GET /companies/{companyId}`.
    /// - Remark: Generated from `#/paths//companies/{companyId}/get(getCompanyDetails)`.
    public enum getCompanyDetails {
        public static let id: Swift.String = "getCompanyDetails"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/companies/{companyId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// 조회할 회사의 고유 식별자
                ///
                /// - Remark: Generated from `#/paths/companies/{companyId}/GET/path/companyId`.
                public var companyId: Components.Parameters.CompanyIdPath
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - companyId: 조회할 회사의 고유 식별자
                public init(companyId: Components.Parameters.CompanyIdPath) {
                    self.companyId = companyId
                }
            }
            public var path: Operations.getCompanyDetails.Input.Path
            /// - Remark: Generated from `#/paths/companies/{companyId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCompanyDetails.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCompanyDetails.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getCompanyDetails.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getCompanyDetails.Input.Path,
                headers: Operations.getCompanyDetails.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/companies/{companyId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/companies/{companyId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.GetCompanyDetailsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.GetCompanyDetailsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getCompanyDetails.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getCompanyDetails.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 조회 성공
            ///
            /// - Remark: Generated from `#/paths//companies/{companyId}/get(getCompanyDetails)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getCompanyDetails.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getCompanyDetails.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// 리소스를 찾을 수 없음
            ///
            /// - Remark: Generated from `#/paths//companies/{companyId}/get(getCompanyDetails)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// 서버 오류
            ///
            /// - Remark: Generated from `#/paths//companies/{companyId}/get(getCompanyDetails)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
